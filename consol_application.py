from classes_and_definitions import *
import pickle
    
mapping = dict()

mapping['autocredits'] = {0: {0: 'Неудовлетворительные условия кредитования',
                             1: 'Проблемы с процессом обращения и обработки заявки',
                             2: 'Проблемы с платежами и погашением кредита',
                             3: 'Проблемы с залогом и автомобилем',
                             4: 'Неудовлетворенность условиями автокредита'},
                         1: {0: 'Хорошее обслуживание',
                             1: 'Удовлетворенность процессом оформления автокредита',
                             2: 'Удовлетворенность условиями кредита и выплатами по кредиту',
                             3: 'Удовлетворенность процессом закрытия автокредита',
                             4: 'Положительный опыт использования рассрочки'}
                         }

mapping['credits'] = {0: {0: 'Проблемы с условиями кредита и страхованием',
                             1: 'Проблемы с обслуживанием и обработкой заявок',
                             2: 'Проблемы с платежами и счетами',
                             3: 'Проблемы с кредитной историей и исполнительным производством',
                             4: 'Проблемы с обращением в банк и услугами поддержки'},
                         1: {0: 'Положительный опыт общения с сотрудниками банка',
                             1: 'Быстрое оформление кредита',
                             2: 'Положительный опыт использования мобильного приложения',
                             3: 'Поддержка для развития бизнеса',
                             4: 'Удобство и гибкость условий использования кредитной карты'}
                         }

mapping['deposits'] = {0: {0: 'Проблемы с исполнительным производством и взысканием долгов',
                             1: 'Проблемы с доступом к счету',
                             2: 'Проблемы с обработкой заявок по горячей линии',
                             3: 'Проблемы с комиссиями и снятием средств с депозитов',
                             4: 'Неудовлетворительные условия депозитов'},
                         1: {0: 'Удовлетворенность гибкими условиями депозитов',
                             1: 'Положительный опыт обслуживания в отделении',
                             2: 'Удовлетворение услугами депозитов, предоставляемыми с использованием карточки',
                             3: 'Удовлетворение качеством мобильного приложения банка',
                             4: 'Удовлетворение процентными ставками и удобством общения с операторами'}
                         }

mapping['hypothec'] = {0: {0: 'Проблемы с условиями ипотечного кредитования',
                             1: 'Отказы по ипотеке и проблемы с коммуникацией с менеджерами',
                             2: 'Проблемы с платежами и денежными операциями по ипотеке',
                             3: 'Сложность процедуры получения ипотеки',
                             4: 'Проблемы со страховкой при оформлении ипотеки'},
                         1: {0: 'Удовлетворенность процессом осуществлени сделки',
                             1: 'Положительный опыт обслуживания в отделении',
                             2: 'Хорошая работа менеджера и отсутствие проблем при подписании договора',
                             3: 'Положительный опыт обслуживания ипотеки',
                             4: 'Выгодные условия, низкая ставка по ипотеке'}
                         }

mapping['creditcards'] = {0: {0: 'Проблемы с списыванием средств и дополнительными комиссиями',
                             1: 'Недовольство условиями акций по карте',
                             2: 'Неудовлетворенность результатом обращения в банк',
                             3: 'Проблемы с исполнением обязательств',
                             4: 'Проблемы с погашением задолженности'},
                         1: {0: 'Эффективное обслуживание и поддержка клиентов',
                             1: 'Удобное приложение',
                             2: 'Удобное оформление карты',
                             3: 'Выгодные условия использования кредитной карты',
                             4: 'Преимущества программ лояльности и рассрочки'}
                         }

mapping['debitcards'] = {0: {0: 'Проблемы с оформлением и предоставлением документов',
                             1: 'Проблемы с доступом к счету',
                             2: 'Проблемы с использованием дебетовой карты',
                             3: 'Неудовлеворенность пенсионеров использованием дебетовой карты',
                             4: 'Неясность условий акций и начисления бонусов'},
                         1: {0: 'Разнообразные финансовые возможности',
                             1: 'Удобство использования мобильного приложения',
                             2: 'Удобство использования дебетовых карт',
                             3: 'Качественное оформление дебетовой карты',
                             4: 'Оперативность работы поддержки'}
                         }

with open('./Вспомогательные файлы/category_models.pkl', 'rb') as f:
    topic_modeling_dict = pickle.load(f)
    
with open('./Вспомогательные файлы/sentiment_classifier.pkl', 'rb') as f:
    sentiment_classifier = pickle.load(f)
    
with open('./Вспомогательные файлы/product_classifer.pkl', 'rb') as f:
    product_classifier = pickle.load(f)

with open('./Вспомогательные файлы/allowed_lemmas.pkl', 'rb') as f:
    allowed_lemmas = pickle.load(f)
    tokenizer=NLTKWordTokenizer()
    text_transformer = TextTransformer(allowed_lemmas)
    
    
response_decomposition = ResponseDecomposition(
    sentiment_classifier=sentiment_classifier,
    category_classifier=product_classifier,
    topic_modeling=topic_modeling_dict,
    text_transformer=text_transformer
)

if __name__ == '__main__':
    
    test_text = input("Введите текст для полуения предсказания: ")

    result = response_decomposition.transform(
        test_text,
        need_topic=True,
        need_sentiment=True,
        need_category=True,
        task_type_sentiment='tfidf',
        classifier_name_sentiment='svm',
        task_type_category='tfidf',
        classifier_name_category='logreg',
        sentiment_for_category_classifier=True,
        threshold_for_sentiment=0.58,
        topic_mapping=mapping 
    )

    print(result)

